#!/bin/bash

function usage() {
  echo "
  usage: $0 option 

  regenerate markdown document into PDF

  OPTIONS:
    -h    this help
    -e    will launch evince to preview it

"
}

# process command line args

while getopts “he” OPTION
do
  case $OPTION in
    h) usage
      exit 1
      ;;
    e) LAUNCH="evince "
      # remove used argument
      shift
      ;;
  esac
done

filepath="$1"
echo "file $filepath"

function check_version() {
  fname=$1

  fdate=`grep -E '^date: ' $fname | awk '{print $2}'`
  echo $fdate |grep -qE "[0-9]{4}-[0-9]{2}-[0-9]{2}"
  if [ "$?" != "0" ] ; then
    echo "ERROR: keyword date value does not seem to be valid"
  fi

  version=`grep -E '^version: ' $fname | awk '{print $2}'`
  vdate=`grep -E "^$version " $fname | awk '{print $2}'`
  echo $vdate |grep -qE "[0-9]{4}-[0-9]{2}-[0-9]{2}"
  if [ "$?" != "0" ] ; then
    echo "ERROR: version date part does not seem to be valid"
  fi

  if [ "$version" != "" ] ; then
    # grep -qE "^$version [0-9]{4}-[0-9]{2}-[0-9]{2}" $fname
    grep -qE "^$version $fdate" $fname
    if [ "$?" != "0" ] ; then
      echo "ERROR: Could not match version number and release date"
    fi
  fi
}

echo "$filepath" |grep -Eq '\.md$'
if [ "$?" == "0" ] ; then
  # should we write it to a PDF dir
  b=`dirname $filepath`
  f=`basename $filepath .md`
  PDF="$b/PDF"
  DOC="$b/docs"
  if [ -d "$PDF" ] ; then
    OUTPUT="-o $PDF"
  else
    if [ -d "$DOC" ] ; then
      OUTPUT="-o $DOC"
    else
      OUTPUT="$f.pdf"
    fi
  fi

  check_version $filepath

  OUT=`ct2 -p -c "$filepath" -v $OUTPUT`
  if [ "$LAUNCH" != "" ] ; then
    $LAUNCH $OUT
  else
    echo "Procesed to $OUT"
  fi
fi
