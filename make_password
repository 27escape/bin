#!/bin/bash
# make_password
# generate a password like XKCD tells us we should do

# include the standard library functions
. "$HOME/bin/include/script_base"

WORDS=4
DIGITS=1
PASSWORDS=4

# ---------------------------------------------------------------------------
# setup HELP for show_usage

export HELP="make_password

    usage:  [-h]

    -h | --help      This help
    -w --words <value> | number of words to generate in the password, default $WORDS
    -d --digits <value> | number of digits to generate in the password, default $DIGITS, only works on some variations of generator
    -p --passwords <value> | number of passwords to generate, defaults to $PASSWORDS
    -v | --verbose   verbose output

"

# ---------------------------------------------------------------------------
# clean up things whenever the script completes
cleanup() {
    echo ""
}
trap cleanup EXIT

# ---------------------------------------------------------------------------
# process command line args

# debug off
export LOG_LEVEL=0

# http://stackoverflow.com/questions/402377/using-getopts-in-bash-shell-script-to-get-long-and-short-command-line-options#402410
# NOTE: This requires GNU getopt.
# need to mention both short (-o) and long (--options) here
# trailing : shows a parameter is required
# TEMP=$(getopt -o vh --long verbose,help,cachedir: -n "$PROGRAM" -- "$@" 2>/dev/null)
TEMP=$(getopt -o vhw:d:p: --long verbose,help,words:,digits:,passwords: -n "$PROGRAM" -- "$@" 2>/dev/null)

# if any parameters were bad
if [ $? != 0 ] ; then show_usage 'Bad Parameters' ; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

while true; do
    case "$1" in
    -v | --verbose )  LOG_LEVEL=7
    set_verbose 1
    shift
    ;;
    -h | --help ) show_usage ''
    ;;
    -w | --words) WORDS="$2"
        shift 2
        ;;
    -d | --digits) DIGITS="$2"
        shift 2
        ;;
    -p | --passwords) PASSWORDS="$2"
        shift 2
        ;;
    # --cachedir) CACHE_DIR="$2"
    #     shift 2 # remove param and data
    * ) break ;;
    esac
done
# tidy up command line
shift

# ---------------------------------------------------------------------------
#  now start the main program
debug " started"

# we only generate one password

for l in `seq 1 1 $PASSWORDS` ;
do
    rnd=$(random 2)
        if [ $rnd == '0' ] ; then
        hsxkpasswd -p xkcd 1
    else
        pwgen-xkcd.pl --words=$WORDS --digits=$DIGITS
    fi
done
