#!/usr/bin/env perl
# PODNAME: tweetq - simple script to add a tweet to a twitter queue
# ABSTRACT: buffer or send a tweet

=head1 SYNOPSIS

    add a message to the default queue
    > tweetq "message to tweet"


    list things in your queue
    > tweetq --list

    to get full help use
    > tweet --help

=head1 DESCRIPTION

Add a tweet to a queue or publish item(s) from that queue to twitter

config file is in ~/.tweetq, get your api keys at https://dev.twitter.com

    tweetq:
      default: account2
      consumer_key: <consumer_key>
      consumer_secret: <consumer_secret>
      queue:
        dsn: dbi:SQLite:/tmp/tweetq.sqlite
        user:
        password:

idea stolen from L<Net::Twitter::Queue>

The queue entry holds information about the queue database that you want to connect to, this is
obviously a perl DBI style connection

This file is also a YAML file and you need to have a few values in here as defaults

    access_token: <your access token>
    access_token_secret: <your access token secret>

Without these the feed will not work.

Other data will be added/removed to this file as you run this twitter script.

=cut

#
# (c) Kevin Mulholland, moodfarm@cpan.org
# this code is released under the Perl Artistic License

# -----------------------------------------------------------------------------

use 5.10.0 ;
use strict ;
use warnings ;
use POSIX qw(strftime) ;
use Path::Tiny ;
use Try::Tiny ;
use App::Basis ;
use App::Basis::Config ;
use App::Basis::ConvertText2::UtfTransform ;
use DBI ;
use App::Basis::Queue ;
use Date::Manip::Date ;
use feature 'say' ;
use Data::Printer ;
use Lingua::EN::Inflexion ;

# -----------------------------------------------------------------------------

use constant CONFIG_FILE    => "$ENV{HOME}/.tweetq" ;
use constant VERSION        => '0.1' ;
use constant FIVE_DAYS      => 5 * 24 * 3600 ;
use constant TWEET_MAX      => 280 ;
use constant SCREEN_MAX     => 80 ;
use constant ACTIVATE_AFTER => 60 ;                     # seconds after the last weet

# -----------------------------------------------------------------------------
# lets do the verbose stuff with private variables
{
    my $testing = 0 ;
    sub set_testing
    {
        $testing = 1 ;
    }
    sub is_testing
    {
        $testing ;
    }

}

# -----------------------------------------------------------------------------

my $program = get_program() ;

# URL parsing from https://metacpan.org/pod/URI
my $valid_url = "(?:([^:/?#]+):)?(?://([^/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?" ;

# -----------------------------------------------------------------------------
# always create the datetime strings the same way
sub std_datetime
{
    my ($secs) = @_ ;
    $secs ||= time() ;
    return strftime( "%Y-%m-%d %H:%M:%S UTC", gmtime($secs) ) ;
}

# -----------------------------------------------------------------------------
# convert something like a datetime string or an epoch value into a standardised
# datetime string and epoch value

sub parse_datetime
{
    my ($datetime) = @_ ;
    state $date = Date::Manip::Date->new() ;
    my @ret ;

    if ( !$datetime ) {
        return wantarray ? ( undef, undef ) : undef ;
    } elsif ( $datetime =~ /^\d+$/ ) {
        # assume anything less than five days is a time into the future
        $datetime += time() if ( $datetime <= FIVE_DAYS ) ;
        @ret = ( std_datetime($datetime), $datetime ) ;
    } else {
        # so parse will parse in locale time not as UTC
        $date->parse($datetime) ;
        {
            # if we get a warning about converting the date to a day, there
            # must be a problem with parsing the input date string
            local $SIG{__WARN__} = sub {
                die "Invalid date, could not parse ($datetime)" ;
            } ;
            my $day = $date->printf("%a") ;
        }

        my $d2 = $date->printf("%O %Z") ;
        # reparse the date to get it into UTC, best way I could think of :(
        $date->parse($d2) ;

        # secs_since_1970_GMT is epoch
        @ret = ( std_datetime( $date->secs_since_1970_GMT() ), $date->secs_since_1970_GMT() ) ;
    }

    return wantarray ? @ret : $ret[0] ;
}

# -----------------------------------------------------------------------------
# connect to the queue DB

sub connect_queue
{
    my ( $dsn, $user, $passwd, $qname ) = @_ ;
    my $dbh =
        DBI->connect( $dsn, $user, $passwd, { RaiseError => 1, PrintError => 0, AutoCommit => 1 } )
        or die "Could not connect to DB $dsn" ;

    if ( $dsn =~ /SQLite/i ) {
        $dbh->do("PRAGMA journal_mode = WAL") ;
        $dbh->do("PRAGMA synchronous = NORMAL") ;
    }

    my $queue = App::Basis::Queue->new(
        dbh           => $dbh,
        default_queue => $qname,
        debug         => 0,
    ) ;
    return $queue ;
}

# -----------------------------------------------------------------------------
# main

my %opt = init_app(
    help_text => "Simple script to queue twitter messages for later publication
        use 'perldoc $program' to get the setup for the ~/.$program config file",
    help_cmdline => "twitter message to send",
    options      => {
        'verbose|v' => 'Output useful information',
        'queue|q=s' => { desc => 'tweet queue to process', },
        'size|s'    => 'Display the number of unprocessed items in the queue',
        'peek=i'    => {
            desc => 'Display the next few items, up to 100',
            # validate => sub { my $i = shift ; $i =~ /^\d+$/ },
            # default => '0',
        },
        'last' => 'similar to peek, but just display the last item in the queue',
        'activates|a=s' =>
            { desc => 'Parsable UTC datetime after which the tweet should be sent', },
        'test' => 'Test system, do not send tweet, enables verbose mode too'
    }
) ;

my $msg = join( ' ', @ARGV ) ;
# we do not care about the lnegth of the tweet, the publish stage will take care of it
if ( $opt{test} ) {
    set_verbose(1) ;
    set_testing(1) ;
}

# lets have the config named after this program
my $cfg = App::Basis::Config->new(
    filename     => CONFIG_FILE,
    die_on_error => 1
) ;

my ($queue) ;
my $accounts = $cfg->get("/tweetq/accounts") ;
if ( !$accounts ) {
    show_usage(
        "There are no accounts, you need to create one with tweetq command using the auth option"
    ) ;
}

my $next_tweet_delay = ACTIVATE_AFTER ;
if ( !$opt{queue} && !$cfg->get('/tweetq/default') ) {
    if ( scalar( @{$accounts} ) == 1 ) {
        my $name = $accounts->[0]->{name} ;
        $opt{queue} = $name ;
        $cfg->set( '/tweetq/default', $name ) ;
        $cfg->store() ;
        debug( "INFO", "setting default account to $name" ) ;
    }
}
$opt{queue} ||= $cfg->get('/tweetq/default') ;

foreach my $acc ( @{$accounts} ) {
    if ( $acc->{name} eq $opt{queue} ) {
        $queue = $acc->{name} ;
        $next_tweet_delay = $acc->{next_tweet} if ( $acc->{next_tweet} ) ;
        last ;
    }
}
if ( !$queue ) {
    show_usage("Could not match an account to $opt{queue}") ;
}

msg_exit( "Could not find valid config in " . CONFIG_FILE, 2 )
    if ( !$queue ) ;

# update the config if it needs it
$cfg->store() ;
my $q = $cfg->get("/tweetq/queue") ;
$q->{prefix} ||= "/" ;

my $theq = connect_queue( $q->{dsn}, $q->{user}, $q->{password}, $q->{prefix} . $queue ) ;

if ( !$theq ) {
    msg_exit( "Could not connect to queue $q->{dsn}", 2 ) ;
}

# get the things out of the way that are information only
# if asking for size or peeking, then there is no message adding or sending
if ( $opt{size} || $opt{peek} || $opt{last} ) {
    my $s = $theq->queue_size() ;
    if ( !$s ) {
        say "The queue is empty" ;
    } elsif ( $opt{size} ) {
        say inflect "<#n:$s> <N:items> <V:were> found in the queue" ;
    } elsif ( $opt{last} ) {
        my $last = $theq->peek( position => 'last' ) ;
        say "last: $last->{activates}\n$last->{data}->{tweet}" ;
        say "-" x SCREEN_MAX ;
    } else {
        my $count = 1 ;
        say "-" x SCREEN_MAX ;
        foreach my $tweet ( $theq->peek( count => $opt{peek} ) ) {
            say $count++ . ": $tweet->{activates}\n$tweet->{data}->{tweet}" ;
            say "-" x SCREEN_MAX ;
        }
    }
} elsif ($msg) {
    # if the user is not bothered we should always add to the end of the queue
    if ( !$opt{activates} ) {
        my $last = $theq->peek( position => 'last' ) ;
        # possibly there is no last item, so default to 'now' in that case
        $last = { activates => 'now' } if ( !$last ) ;
        my ( $a, $e ) = parse_datetime( $last->{activates} ) ;
        $e += $next_tweet_delay ;    # make it ??s after the last one
                                     # and set the activation time
        $opt{activates} = std_datetime($e) ;
    }
    my ( $activates, $epoch ) = parse_datetime( $opt{activates} ) ;

    my $resp = $theq->add(
        data      => { tweet => $msg },
        activates => $activates
    ) ;
} else {
    verbose("Parameters are required, or message queue is empty") ;
    exit 0 ;
}
