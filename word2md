#!/bin/bash
# word2md

# include the standard library functions
. "$HOME/bin/include/script_base"

# ---------------------------------------------------------------------------
# setup HELP for show_usage

export HELP="word2md

    usage:  [-h]

    -h | --help      This help
    -v | --verbose   verbose output

"

# ---------------------------------------------------------------------------
# clean up things whenever the script completes
cleanup() {
    echo ""
}
trap cleanup EXIT

# ---------------------------------------------------------------------------
# process command line args

# debug off
export LOG_LEVEL=0

# http://stackoverflow.com/questions/402377/using-getopts-in-bash-shell-script-to-get-long-and-short-command-line-options#402410
# NOTE: This requires GNU getopt.
# need to mention both short (-o) and long (--options) here
# trailing : shows a parameter is required
# TEMP=$(getopt -o vh --long verbose,help,cachedir: -n "$PROGRAM" -- "$@" 2>/dev/null)
TEMP=$(getopt -o vh --long verbose,help -n "$PROGRAM" -- "$@" 2>/dev/null)

# if any parameters were bad
if [ "$?" != "0" ] ; then show_usage 'Bad Parameters' ; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

while true; do
    case "$1" in
    -v | --verbose )  LOG_LEVEL=7
    set_verbose 1
    shift
    ;;
    -h | --help ) show_usage ''
    ;;
    # --cachedir) CACHE_DIR="$2"
    #     shift 2 # remove param and data
    * ) break ;;
    esac
done
# tidy up command line
shift

# ---------------------------------------------------------------------------
#  now start the main program
debug " started"

INFILE=$1
OUTFILE=$2
INDIR=$(dirname "$1")
INBASE=$(basename "$1" ".doc")
INBASE=$(basename "$1" ".docx")



pandoc --extract-media="$INDIR" -r $INFORMAT -t gfm $INFILE -o $OUTFILE
