#!/usr/bin/env perl
# PODNAME: queue_iplayer - add know show names to the iplayer queue
# ABSTRACT: Add tv shows to the iplayer pvr queue

=head1 NAME

 queue_iplayer

=head1 SYNOPSIS

    just add known tv shows to iplayer queue
    > queue_iplayer

    add a tv show
    > queue_iplayer doctor who

    add a radio show
    > queue_iplayer --type=radio In Our Time

    list the current config
    > queue_iplayer --list

    to get full help use
    > queue_iplayer --help

    yaml config file in ~/.queue_iplayer

    tv:
      - the living planet
      - the plantagenets
      - hinterland
      - doctor who
      - sherlock
    radio:
      - pratchett
      - The Infinite Monkey Cage

=head1 DESCRIPTION

Queue tv and radio shows to the iplayer pvr queue. Optionally add a new item
to either of those lists

#head1 See Also

L<iplayer> has the ability to suggest and record previously downloaded shows

=cut

#
# (c) kevin mulholland, kevin.perl@27escape.com
# this code is released under the Perl Artistic License

# find bad matches
# while IFS='' read -r line || [[ -n "$line" ]]; do
#     echo "echo $line >>/tmp/gip.log" >>/tmp/gip.sh
#     echo "get_iplayer --no-purge '$line' >>/tmp/gip.log" >>/tmp/gip.sh
#     echo "echo '' >>/tmp/gip.log" >>/tmp/gip.sh
# done < "/tmp/gip"

use 5.10.0 ;
use strict ;
use warnings ;
use POSIX qw(strftime) ;
use App::Basis ;
use App::Basis::Config ;
use Path::Tiny ;
use YAML::Tiny::Color ;

# -----------------------------------------------------------------------------

my $IPLAYER_CMD = "$ENV{HOME}/bin/get_iplayer --no-purge " ;
my $PVR         = "~/.get_iplayer/pvr" ;

# -----------------------------------------------------------------------------
sub build_queue
{
    my ($q) = @_ ;
    my $queue ;

    foreach my $e ( @{$q} ) {
        next if ( !$e || ref($e) eq 'HASH' ) ;
        $e =~ s/['"]//g ;
        $queue .= "'$e' " ;
    }

    return $queue ;
}

# -----------------------------------------------------------------------------
# output the tested output
sub test_out
{
    my ( $type, $text ) = @_ ;
    say "$type:" ;

    foreach my $l ( sort map { $1 if (/^(\d+:.*?$)/) ; } split( "\n", $text ) ) {
        next if ( $l !~ /^(\d+):\s+(.*)/ ) ;
        say sprintf( "  %5d:\t%s", $1, $2 ) ;
    }
}

# -----------------------------------------------------------------------------
# main

my $program = get_program() ;

my %opt = init_app(
    help_text    => "queue known tv/radio shows to iplayer pvr or add to the list and queue",
    help_cmdline => "optional show name to add",
    options      => {
        'verbose|v' => 'Dump extra useful information',
        'type|t=s'  => {
            default  => 'tv',
            desc     => 'type of show to add [tv|radio]',
            validate => sub { my $val = shift ; return $val =~ /tv|radio/i ; }
        },
        'list|ls|l' => 'list the config (and exit)',
        'test'      => 'test what should be recorded, do not record',
        "remove|r"  => 'add show to remove list',
        'queue|q'   => 'show whats in the current record queue',
    }
) ;

if ( $opt{queue} ) {
    my $command = $IPLAYER_CMD . '--pvrlist' ;
    my ( $ret, $out, $err ) = run_cmd($command) ;

    foreach my $l ( sort split( /\n/, $out ) ) {
        next if ( $l !~ /^pvrsearch = ONCE_(.*?)_[bp]\d+.*/ ) ;
        $l = $1 ;
        $l =~ s/_/ /g ;
        $l =~ s/\s+-\s?//g ;
        say $l ;
    }
    exit ;
}

# lets have the config named after this program
my $cfg = App::Basis::Config->new( filename => "$ENV{HOME}/.$program" ) ;

# example of using an app specifc config
my $tv     = $cfg->get('/tv') ;
my $radio  = $cfg->get('/radio') ;
my $remove = $cfg->get('/remove') ;
my $show   = join( ' ', @ARGV ) ;

if ($show) {
    if ( $opt{remove} ) {
        $show =~ s/\s/_/g ; # get rid of spaces
        push @{$remove}, $show ;
        $cfg->set( "/remove", $remove ) ;
        verbose("Adding show '$show' to remove queue") ;
    } elsif ( lc( $opt{type} ) eq 'radio' ) {
        verbose("Adding show '$show' to radio queue") ;
        push @{$radio}, $show ;
        $cfg->set( "/radio", $radio ) ;
    } else {
        verbose("Adding show '$show' to tv queue") ;
        push @{$tv}, $show ;
        $cfg->set( "/tv", $tv ) ;
    }
    # bug in config meaning that things are not set to be stored when they have changed
    $cfg->changed(1) ;
    $cfg->store() ;
}

if ( $opt{list} ) {
    my $r = $cfg->raw() ;
    say "Config\n " . Dump($r) ;
    exit(0) ;
}

# first up we always add the scifi radio shows
verbose("Finding radio scifi") ;
my $command = $IPLAYER_CMD . '--type=radio --category=scifi --search=".*" --pvr-queue' ;
my ( $ret, $out, $err ) = run_cmd($command) ;

# do the tv shows
my $queue  = build_queue($tv) ;
my $record = "--pvr-queue" ;
if ( $opt{test} ) {
    # don't allow pvr record if testing
    $record = "" ;
}
if ($queue) {
    verbose("Building tv queue") ;
    $command = $IPLAYER_CMD . '--type=tv --search=".*" $record $queue ' ;
    ( $ret, $out, $err ) = run_cmd($command) ;
    if ( $opt{test} ) {
        test_out( "tv", $out ) ;
    }
}

# do the radio shows
$queue = build_queue($radio) ;
if ($queue) {
    verbose("Building radio queue") ;
    $command = $IPLAYER_CMD . "--type=radio $record $queue " ;
    ( $ret, $out, $err ) = run_cmd($command) ;
    if ( $opt{test} ) {
        test_out( "radio", $out ) ;
    }
}

# now remove things from the queue that might have matched and we do not want
# usually things from BBC scotland

verbose("Checking for things to remove") ;
my $phash = path($PVR)->visit(
    sub {
        my ( $path, $state ) = @_ ;
        return if ( !$path->is_file ) ;

        foreach my $f (@$remove) {
            my $name = $path->basename ;

            if ( $name =~ /$f/i ) {
                if ( $opt{test} ) {
                    verbose("Would Remove $name") ;
                } else {
                    verbose("Removing $name") ;
                    $path->remove ;
                }
            }
        }
    },
    { recurse => 0 }
) ;

