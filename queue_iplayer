#!/usr/bin/env perl
# PODNAME: queue_iplayer - add know show names to the iplayer queue
# ABSTRACT: Add tv shows to the iplayer pvr queue

=head1 NAME

 queue_iplayer

=head1 SYNOPSIS

    just add known tv shows to iplayer queue
    > queue_iplayer

    add a tv show
    > queue_iplayer doctor who

    add a radio show
    > queue_iplayer --type=radio In Our Time

    list the current config
    > queue_iplayer --list

    to get full help use
    > queue_iplayer --help   

    yaml config file in ~/.queue_iplayer
    
    tv:
      - the living planet
      - the plantagenets
      - hinterland
      - doctor who
      - sherlock
    radio:
      - pratchett
      - The Infinite Monkey Cage

=head1 DESCRIPTION

Queue tv and radio shows to the iplayer pvr queue. Optionally add a new item
to either of those lists

#head1 See Also

L<iplayer> has the ability to suggest and record previously downloaded shows

=cut

#
# (c) yourname, your@email.address.com
# this code is released under the Perl Artistic License

use 5.10.0;
use strict;
use warnings;
use POSIX qw(strftime);
use Data::Printer ;
use App::Basis;
use App::Basis::Config;

# -----------------------------------------------------------------------------

my $IPLAYER_CMD = "$ENV{HOME}/bin/get_iplayer ";
my $verbose ;

# -----------------------------------------------------------------------------
# basic debug to STDERR, redirect to anywhere you like

sub other_debug {
    my ( $lvl, $debug ) = @_;
    return if( !$verbose) ;
    if ( !$debug ) {
        $debug = $lvl;

        # set a default level
        $lvl = 'INFO';
    }

    say STDERR strftime( '%Y-%m-%d %H:%M:%S', gmtime( time() ) ) . " [$lvl] " . get_program() . " " . $debug;
}

# -----------------------------------------------------------------------------
# main

my $program = get_program();

my %opt = init_app(
    help_text    => "queue known tv/radio shows to iplayer pvr or add to the list and queue",
    help_cmdline => "optional show name to add",
    options      => {
        'verbose|v' => 'Dump extra useful information',
        'type|c=s'  => {
            default  => 'tv',
            desc     => 'type of show to add [tv|radio]',
            validate => sub { my $val = shift; return $val =~ /tv|radio/i ; }
        },
        'list|l' => 'list the config (and exit)',
    }
);
$verbose = $opt{verbose} ;

set_debug( \&other_debug );
debug( "INFO", "Started" );

# lets have the config named after this program
my $cfg = App::Basis::Config->new( filename => "$ENV{HOME}/.$program" );

# example of using an app specifc config
my $tv    = $cfg->get('/tv');
my $radio = $cfg->get('/radio');
my $show  = join( ' ', @ARGV );

if ($show) {
    if ( lc( $opt{type} ) eq 'radio' ) {
        push @{$radio}, $show;
        $cfg->set( "/radio", $radio );
    }
    else {
        push @{$tv}, $show;
        $cfg->set( "/tv", $tv );
    }
    $cfg->store();
}

if( $opt{list}) {
    say "Config\n======\n" . p($cfg->raw()) ;
    exit( 0) ;
}

# first up we always add the scifi radio shows
my $command = $IPLAYER_CMD . '--type=radio --category=scifi --search=.* --pvr-queue';
debug( "INFO", "Adding scifi radio shows");
my ( $ret, $out, $err ) = run_cmd($command);

# do the tv shows
my $queue;
map { $queue .= '"' . $_ . '" ' } @{$tv};
$command = $IPLAYER_CMD . "--type=tv --pvr-queue $queue ";
debug( "INFO", "Adding tv shows: $queue");
( $ret, $out, $err ) = run_cmd($command);

# do the radio shows
$queue = "";    # reset the queue
map { $queue .= '"' . $_ . '" '  } @{$radio};
$command = $IPLAYER_CMD . "--type=radio --pvr-queue $queue ";
debug( "INFO", "Adding radio shows: $queue");
( $ret, $out, $err ) = run_cmd($command);
