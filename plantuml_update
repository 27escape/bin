#!/bin/bash
# update plantuml jar file to $HOME/bin

# include the standard library functions
. "$HOME/bin/include/script_base"
PLANTUML_MIRROR='https://sourceforge.mirrorservice.org/p/pl/plantuml/plantuml.jar'
PLANTUML_BETA='http://beta.plantuml.net/plantuml.jar'
# this is the file that we assume will always exist
MATCH_FILE='net/sourceforge/plantuml/api/PlantumlUtils.class'

# ---------------------------------------------------------------------------
# setup HELP for show_usage

export HELP="update plantuml jar file to $HOME/bin

    usage:  [-h]

    -h | --help      This help
    -b | --beta      Fetch beta version of plantuml jar
    -v | --verbose   verbose output

"

# ---------------------------------------------------------------------------
# clean up things whenever the script completes
cleanup() {
    echo ""
}
trap cleanup EXIT

# -----------------------------------------------------------------------------
# check if a file looks like a zip file
is_zip() {
    file=$1
    file -i "$file" | grep -q 'application/java-archive'
    # 'application/zip;'
}

# -----------------------------------------------------------------------------
# is_like_plantuml
# check if a zip/jarfile looks a bit like a plantuml one
is_like_plantuml() {
    file=$1
    jar tf "$file" "$MATCH_FILE" | grep -q "$MATCH_FILE"
    # unzip -qq -l "$file" "$MATCH_FILE" >/dev/null
}

# ---------------------------------------------------------------------------
# process command line args

# debug off
export LOG_LEVEL=0

# http://stackoverflow.com/questions/402377/using-getopts-in-bash-shell-script-to-get-long-and-short-command-line-options#402410
# NOTE: This requires GNU getopt.
# need to mention both short (-o) and long (--options) here
# trailing : shows a parameter is required
# TEMP=$(getopt -o vh --long verbose,help,cachedir: -n "$PROGRAM" -- "$@" 2>/dev/null)
TEMP=$(getopt -o bvh --long beta,verbose,help -n "$PROGRAM" -- "$@" 2>/dev/null)

# if any parameters were bad
if [ $? != 0 ] ; then show_usage 'Bad Parameters' ; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

while true; do
    case "$1" in
    -b | beta)  PLANTUML_MIRROR=$PLANTUML_BETA
        shift
    ;;
    -v | --verbose )  LOG_LEVEL=7
        set_verbose 1
        shift
    ;;
    -h | --help ) show_usage ''
    ;;
    # --cachedir) CACHE_DIR="$2"
    #     shift 2 # remove param and data
    * ) break ;;
    esac
done
# tidy up command line
shift

# ---------------------------------------------------------------------------
#  now start the main program
debug " started"

TMP_JAR="/tmp/plantuml.jar.$$"
REAL_JAR="$HOME/bin/plantuml.jar"
rm -f "$TMP_JAR"
# bail out early if we cannot get the file
verbose "Fetching $PLANTUML_MIRROR"
if ! wget -q -O "$TMP_JAR" "$PLANTUML_MIRROR" ; then
    echo_stderr "Could not download plantuml JAR file"
    exit 2
fi

# does the downloaded file look like a JAR file, well we can check if it is a ZIP at least
# then check if we have one of the plantuml directories in the JAR file
# if is_zip "$TMP_JAR" && is_like_plantuml "$TMP_JAR" ; then
if is_like_plantuml "$TMP_JAR" ; then
    # only copy if its more recent, maintain file datetime, helps next update
    if [ "$TMP_JAR" -nt "$REAL_JAR" ] ; then
        cp -ap "$TMP_JAR" "$REAL_JAR"
        echo "Updated $REAL_JAR"
    else
        echo_stderr "No update available"
        rm -f "$TMP_JAR"
    fi
else
    echo_stderr "Did not copy, does not look like plantuml JAR file"
    rm -f "$TMP_JAR"
    exit 2
fi

