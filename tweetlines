#!/usr/bin/env perl
# PODNAME: tweetlines - simple script to tweet multiple lines to twitter
# ABSTRACT: tweet lines

=head1 NAME

tweetlines

=head1 SYNOPSIS

    > tweetlines ..options..

    to get full help use
    > tweetlines --help

=head1 DESCRIPTION

Reads lines of text from file or STDIN and tweets with a configurable interval

=cut

#
# (c) kevin mulholland, moodfarm@cpan.org
# this code is released under the Perl Artistic License

use 5.10.0 ;
use strict ;
use warnings ;
use App::Basis ;
use App::Basis::Config ;
use Path::Tiny ;
use POSIX qw(ceil strftime) ;
use DBI ;
use App::Basis::Queue ;
use Date::Manip::Date ;

# -----------------------------------------------------------------------------

use constant FIVE_DAYS => 5 * 24 * 3600 ;

# -----------------------------------------------------------------------------

my $QUEUE       = "SloMoMovies" ;
my $CONFIG_FILE = "$ENV{HOME}/.tweetq" ;

# -----------------------------------------------------------------------------
# connect to the queue DB

sub connect_queue
{
    my ( $dsn, $user, $passwd, $qname ) = @_ ;
    my $dbh
        = DBI->connect( $dsn, $user, $passwd,
        { RaiseError => 1, PrintError => 0, AutoCommit => 1 } )
        or die "Could not connect to DB $dsn" ;

    if ( $dsn =~ /SQLite/i ) {
        $dbh->do("PRAGMA journal_mode = WAL") ;
        $dbh->do("PRAGMA synchronous = NORMAL") ;
    }

    my $queue = App::Basis::Queue->new(
        dbh           => $dbh,
        default_queue => $qname,
        debug         => 0,
    ) ;
    return $queue ;
}

# -----------------------------------------------------------------------------
# always create the datetime strings the same way
sub std_datetime
{
    my ($secs) = @_ ;
    $secs ||= time() ;
    return strftime( "%Y-%m-%d %H:%M:%S UTC", gmtime($secs) ) ;
}

# -----------------------------------------------------------------------------
# convert something like a datetime string or an epoch value into a standardised
# datetime string and epoch value

sub parse_datetime
{
    my ($datetime) = @_ ;
    state $date = new Date::Manip::Date ;
    my @ret ;

    if ( !$datetime ) {
        return wantarray ? ( undef, undef ) : undef ;
    } elsif ( $datetime =~ /^\d+$/ ) {
        # assume anything less than five days is a time into the future
        $datetime += time() if ( $datetime <= FIVE_DAYS ) ;
        @ret = ( std_datetime($datetime), $datetime ) ;
    } else {
        # so parse will parse in locale time not as UTC
        $date->parse($datetime) ;
        {
            # if we get a warning about converting the date to a day, there
            # must be a problem with parsing the input date string
            local $SIG{__WARN__} = sub {
                die "Invalid date, could not parse" ;
            } ;
            my $day = $date->printf("%a") ;
        }

        my $d2 = $date->printf("%O %Z") ;
        # reparse the date to get it into UTC, best way I could think of :(
        $date->parse($d2) ;

        # secs_since_1970_GMT is epoch
        @ret = (
            std_datetime( $date->secs_since_1970_GMT() ),
            $date->secs_since_1970_GMT()
        ) ;
    }

    return wantarray ? @ret : $ret[0] ;
}

# -----------------------------------------------------------------------------
# main

my $program = get_program() ;

my %opt = init_app(
    help_text => "Tweet multiple lines from a file, line by line",

    help_cmdline =>
        "Filename_to_tweet, or '-' for STDIN ('.' or EOF ends input)",
    options => {
        'queue|q=s' => {
            desc    => 'Queue to use',
            default => $QUEUE,
        },
        'minutes|m=i' => {
            desc    => 'Minutes between updates',
            default => 1
        },
        'activates|a=s' => {
            desc =>
                'Parsable UTC datetime after which the tweetlines should start',
        },
        'verbose|v' => 'Be verbose about whats going on',
    }
) ;

# lets have the config named after this program
my $cfg = App::Basis::Config->new(
    filename     => $CONFIG_FILE,
    die_on_error => 1
) ;

if ( !$cfg ) {
    msg_exit( "Could not load config file $CONFIG_FILE", 2 ) ;
}

my $q = $cfg->get("/tweetq/queue") ;
if ( !$q || !$q->{dsn} ) {
    msg_exit( "No queue for $opt{queue} setting in $CONFIG_FILE", 2 ) ;
}

$q->{prefix} ||= "/" ;
my $theq
    = connect_queue( $q->{dsn}, $q->{user}, $q->{password},
    $q->{prefix} . $opt{queue} ) ;

if ( !$theq ) {
    msg_exit( "Could not connect to queue $q->{dsn}", 2 ) ;
}

my $seconds = $opt{minutes} * 60 ;

my $last = $theq->peek( position => 'last' ) ;
my $t = $last ? $last->{activates} : 0 ;
# override with what is on the ocmmand line
$t = $opt{activates} if ( $opt{activates} ) ;
my ( $activates, $epoch ) = parse_datetime($t) ;

my $file = $ARGV[0] ;
my @tweetlines ;
if ( $file eq '-' ) {
    # read from STDIN, stop when we get '.' on its own
    while ( my $line = <STDIN> ) {
        chomp $line ;
        last if ( $line eq '.' ) ;
        # verbose( "Line is $line") ;
        push @tweetlines, $line ;
    }
    verbose_data(@tweetlines) ;
} else {
    @tweetlines = path( $opt{file} )->lines_utf8 ;
}
if (@tweetlines) {
    my $hours = scalar(@tweetlines) ;
    my $days  = ceil( $hours / 24 ) ;

    verbose("Subtitles...") ;
    verbose_data(@tweetlines) ;
    foreach my $m (@tweetlines) {
        my $resp = $theq->add(
            data      => { tweet => $m },
            activates => std_datetime($epoch)
        ) ;
        $epoch += $seconds ;
    }
} else {
    msg_exit("There did not seem to be any lines to tweet") ;
}
